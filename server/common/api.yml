swagger: "2.0"

info:
  version: 1.0.0
  title: backend
  description: hiec APIs

basePath: /api

tag: 
- name: "auth"
  description: "Everything about sign up and sign in"

consumes:
  - application/json
produces:
  - application/json

definitions:
  updateAccount:
    type : object
    title: update account
    required:
      - name
      - dob,
      - gender,
      - phoneNumber,
      - address,
      - occupation
      - avatar
    properties:
      name:
        type : string
        example: Nguyen Van B
      dob: 
        type : string
        example : 21/222/2222
      gender :
        type : string
        example : female
      phoneNumber:
        type : string
        example : 034857654
      address : 
        type : string
        example : 49 South Coudta
      occupation:
        type : object
        example : {
          isWorking : true,
          describe : {
            "any":"describe your work"
          }
        }
      avatar : 
        type : string
        example : "your avatar link"


  newAccount:
    type: object
    title: register new Account
    required:
      - email
      - password  
      - name
      - dob
      - isWorking
    properties:
      name:
        type: string
        example: Nguyen Van A
      email:
        type: string
        example: NguyenVanA@email.com
      dob:
        type : string
        example : 21/22/2222
      isWorking:
        type: boolean
        example: true
      password :
        type : string
        example : NguyenVanA2121


paths:
  /auth/:
    get:
      tags:
        - auth
      description: logout
      paramenters:
        - name: token
          in: query
          description: token to be disabled
          schema:
            type: string

  /user/{id}:
    get:
      tags:
      - user
      description: get user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: user ID to get User
          type: string
      responses:
        200:
          description: User found
        404:
          description: User not found

    put:
      tags:
      - user
      description: update user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: user ID to update User
          type: string
        - name : info
          in : body
          required : true
          description : data to update
          schema: 
           $ref: "#/definitions/updateAccount"
          type : object
      responses:
        200:
          description: User found
        404:
          description: User not found

    delete:
      tags:
      - user
      description: delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: user ID to delete User
          type: string
      responses:
        200:
          description: User deleted
        404:
          description: User not found       

  /user/register:
    post:
      tags:
        - user
      description: register account
      parameters:
       - name: info
         in: body
         require: true
         description: User object that needs to be added to the user db
         schema: 
           $ref: "#/definitions/newAccount"
      respond:
        - 200:
          description: Register success
        - 405:
          description: Invalid input


  /user/{id}/password:
    tags :
      - user
    description : change password
    parameters: 
      - name : id
        in : path
        require: true
        description : User ID to find User
      - name : password
        in : body
        require : true
        description : new password
    respond : 
      - 200 : 
        description: change password success
      - 405 : Invalid input
  